A really important thing to remember when writing CSS, or working on the web as a whole, is that everything displayed by CSS is a box. Whether that's a box that uses border-radius to look like a circle, or even just some text: the key thing to remember is that it's all boxes.

Boxes have different behavior based on their display value, their set dimensions, and the content that lives within them. This content could be even more boxes—generated by child elements—or plain text content. Either way, this content will affect the size of the box by default.

Notice that when the box is using extrinsic sizing, there’s a limit of how much content you can add before it overflows out of the box’s bounds. This makes the word, “awesome”, overflow.

Content overflows from its parent box when the parent has a fixed width. To make content always fit, you can make the width and the height of the parent dependent on the inner child content. E.g. set width to min-content. 

When content is too big for the box it is in, we call this overflow. You can manage how an element handles overflow content, using the overflow property.

The four main areas of the box model: content box, padding box, border box and margin box.

	You start with content box, which is the area that the content lives in. As you learned before: this content can control the size of its parent, so is usually the most variably sized area.

	The padding box surrounds the content box and is the space created by the padding property. Because padding is inside the box, the background of the box will be visible in the space that it creates. If our box has overflow rules set, such as overflow: auto or overflow: scroll, the scrollbars will occupy this space too.

	The border box surrounds the padding box and its space is occupied by the border value. The border box is the bounds of your box and the border edge is the limit of what you can visually see. The border property is used to visually frame an element.

	The final area, the margin box, is the space around your box, defined by the margin rule on your box. Properties such as outline and box-shadow occupy this space too because they are painted on top, so they don't affect the size of our box. You could have an outline-width of 200px on our box and everything inside and including the border box would be exactly the same size.

Every browser applies a user agent stylesheet to HTML documents. 

	The CSS varies between browsers, but they provide defaults to make content easier to read. They define how elements should look and behave if there's no CSS defined. 
	
	A box's default display is set in the user agent stylesheet 
	
		E.g. a <div>'s default 'display' value is 'block'. a <li> has a default 'display' of 'list-item'. <span> has a default 'display' of 'inline' 

	It is in the user agent styles where a box's default display is set, too. For example, if we are in a normal flow, a <div> element's default display value is block, a <li> has a default display value of list-item, and a <span> has a default display value of inline.

Each CSS element has default settings set by the browser - CSS resets override this 

CSS reset - https://andy-bell.co.uk/a-modern-css-reset/

The display property does two things. The first thing it does is determine if the box it is applied to acts as inline or block.

You can't set an explicit width and height on inline elements. Any block level margin and padding will be ignored by the surrounding elements.

There are two main layout mechanisms that create layout rules for multiple elements, flexbox and grid.